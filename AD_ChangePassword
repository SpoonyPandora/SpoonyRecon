###This script will allow you to change password of target user without RSAT. It takes advantage of the ADSI type accelerator for searching usernames and changing password values.

###Initialization variables (domain, target user, etc.)

$domain = Read-Host "Input domain:"
$user = Read-Host "Input username:"
$old_Pass = Read-Host -AsSecureString "Input old password:"
$new_Pass = Read-Host -AsSecureString "Input new password:"
$confirm_new_Pass = Read-Host -AsSecureString "Confirm new password:"

###Check for matching $new_Pass and $confirm_new_Pass values.

function Compare-passwordValues {
  $BSTR_p1 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($new_Pass)
  $BSTR_p2 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($confirm_new_Pass)
  $PlainPassword_p1 = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR_p1)
  $PlainPassword_p2 = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR_p2)
  $comparison_check = ($PlainPassword_p1 -eq $PlainPassword_p2)
  if ($comparison_check -eq "True") {
    Write-Host "New password confirmed..."
    }
  else {
    Write-Host "New and confirm password values do not match!"
    Exit}
}

Compare-passwordValues

###Check for existence of user and if it doesn't exist, err and exit. If user exists, initialize ADSI object and utilze the ChangePassword function to swap oldPass with newPass.

$verify_User = [asdisearcher]"(&objectClass=user)(ObjectCategory=person)(userPrincipalName=$user))"
If(-Not $verify_User) {
  Write-Host "User not found, exiting..."
  Exit}
Else {
  [adsi]"WinNT://$domain/$user".ChangePassword('$old_Pass','new_Pass')
  Write-Host "Password change for user $domain\$user successful!"
  Exit}

###ROADMAP/WISHLIST
#Confirm new password values match. Need to call .NET to decrypt strings.
